@using Salvation.Core.ViewModel
@inject IJSRuntime JS

@if(Talents.Count == 0)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <div>
        <MudText Typo="Typo.h6" Align="Align.Center" Class="@($"mb-4 {(TotalPointsSpent > PointsTotal ? "mud-error-text" : "")}")">@TotalPointsSpent / @PointsTotal</MudText>
    </div>
    <div class="talent-container">
        <div class="talent-grid mud-theme-dark">
            @foreach (var talent in Talents)
            {
                <a href="https://www.wowhead.com/beta/spell=@(talent.TalentEntries[talent.IsSecondChoiceSelected ? 1 : 0].SpellId)"
                    data-wowhead="def=@(talent.TalentEntries[talent.IsSecondChoiceSelected ? 1 : 0].DefinitionId)&rank=@(talent.PointsSpent == 2 ? 2 : 1)" 
                    data-wh-rename-link="false"
                    data-no-touch-lightbox="true"
                    class="talent talent-col-@(talent.TreeColumn) talent-row-@(talent.TreeRow)"
                    @onclick="e => OnTalentClick(e, talent)"
                    @onclick:preventDefault="true"
                    @oncontextmenu="e => OnTalentClick(e, talent)"
                    @oncontextmenu:preventDefault="true" 
                    data-ready="@(talent.PointsSpent == talent.MaxRanks || talent.IsFreeNode ? 0 : 1)"
                    data-node-type="@talent.Type"
                    data-spell-passive="@(talent.Type != NodeTypeChoice && talent.TalentEntries[0].Type == NodeSpellTypePassive ? 1 : 0)"
                    data-node-unlocked="@(talent.IsUnlocked ? 1 : 0)">
                    <div class="talent-contents"data-spell-passive="@(talent.Type != NodeTypeChoice && talent.TalentEntries[0].Type == NodeSpellTypePassive ? 1 : 0)">
                            @if(talent.Type == NodeTypeChoice)
                            {
                                <div class="talent-image-holder">
                                    <div class="talent-image talent-image-choice-left" style="@GetImageStyle(talent.TalentEntries[0].Icon)"
                                        data-ready="@(talent.PointsSpent == talent.MaxRanks || talent.IsFreeNode ? 0 : 1)"
                                        data-choice-selected="@(talent.IsSecondChoiceSelected ? "0" : "1")" >

                                    </div>
                                    <div class="talent-image talent-image-choice-right" style="@GetImageStyle(talent.TalentEntries[1].Icon)"
                                         data-ready="@(talent.PointsSpent == talent.MaxRanks || talent.IsFreeNode ? 0 : 1)" 
                                         data-choice-selected="@(talent.IsSecondChoiceSelected ? "1" : "0")">

                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="talent-image-holder">
                                    <div class="talent-image" style="@GetImageStyle(talent.TalentEntries[0].Icon)"></div>
                                </div>
                            }
                    </div>
                </a>
                @if (!talent.IsFreeNode)
                {
                    <div class="talent-points-spent talent-col-@(talent.TreeColumn) talent-row-@(talent.TreeRow)">
                        @talent.PointsSpent/@talent.MaxRanks
                    </div>
                }
            }
        </div>
    </div>
    <div>
        <p>Selected talents</p>
        <ul>
            @foreach(var talent in Talents.Where(t => t.PointsSpent > 0))
            {
                @if(talent.Type == NodeTypeChoice && talent.IsSecondChoiceSelected)
                {
                    <li><a href="https://www.wowhead.com/beta/spell=@talent.TalentEntries[1].SpellId" data-wh-icon-size="tiny">@talent.Name</a> (@talent.PointsSpent / @talent.TalentEntries[0].MaxRanks)</li>
                }
                else
                {
                    <li><a href="https://www.wowhead.com/beta/spell=@talent.TalentEntries[0].SpellId" data-wh-icon-size="tiny">@talent.Name</a> (@talent.PointsSpent / @talent.TalentEntries[0].MaxRanks)</li>
                }
                
            }
        </ul>
    </div>
}

@code {
    private static string NodeTypeSingle = "single";
    private static string NodeTypeTiered = "tiered"; // No idea what this is.
    private static string NodeTypeChoice = "choice"; // Implement something for choice node later
    private static string NodeSpellTypePassive = "passive"; // Passive talents
    private static string UnknownIconName = "inv_misc_questionmark.jpg";
    private int TotalPointsSpent = 0;

    [Parameter]
    public int PointsTotal { get; set; } = 0;

    [Parameter]
    public List<Talent> Talents { get; set; } = new List<Talent>();

    public string GetImageStyle(string talentIcon)
    {
        return $"background-image: url('static-data/icons/{talentIcon}.jpg'), url('static-data/icons/{UnknownIconName}');";
    }

    protected override void OnInitialized()
    {
        InitialiseTalents();  
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("updateWowheadTooltips");

        if(firstRender)
        {
            // Configure all of the talent path lines here?
        }
    }

    private void InitialiseTalents()
    {
        foreach (var talent in Talents)
        {
            if (talent.IsFreeNode)
            {
                talent.PointsSpent = 1;
            }
        }

        UpdateUnlockedTalents();
    }

    private void UpdateUnlockedTalents()
    {
        foreach(var talent in Talents)
        {
            var talentIsUnlocked = false;

            // A node is active if:

            // 1. It's a free node
            if (talent.IsFreeNode)
                talentIsUnlocked = true;

            // 2. It's a valid entry node
            if(talent.EntryNode)
            {
                talentIsUnlocked = true;
            }

            // 3. One of its parent nodes is maxed out
            foreach(var parent in Talents.Where(t => t.NextNodes.Contains(talent.Id)))
            {
                if(parent.PointsSpent == parent.MaxRanks)
                    talentIsUnlocked = true;
            }

            // Finally, it can't be unlocked if it doesn't meet required total points
            if (TotalPointsSpent < (talent.RequiredPoints ?? 0))
                talentIsUnlocked = false;

            // It is unlocked though, if you have any points in it
            if (talent.PointsSpent > 0)
                talentIsUnlocked = true;

            talent.IsUnlocked = talentIsUnlocked;
        }
    }

    public void OnTalentClick(MouseEventArgs eventArgs, Talent talent)
    {
        switch(eventArgs.Button)
        {
            case 0:
                TalentLeftClick(eventArgs, talent);
                break;
            case 2:
                TalentRightClick(eventArgs, talent);
                break;
            default:
                break;
        }
    }

    private void TalentLeftClick(MouseEventArgs eventArgs, Talent talent)
    {
        // If there are points to spend, spend them
        if (talent.PointsSpent < talent.MaxRanks)
        {
            talent.PointsSpent++;
            TotalPointsSpent++;
        }
        else if(talent.Type == NodeTypeChoice && talent.PointsSpent > 0)
        {
            talent.IsSecondChoiceSelected = !talent.IsSecondChoiceSelected;
        }

        UpdateUnlockedTalents();
    }

    private void TalentRightClick(MouseEventArgs eventArgs, Talent talent)
    {
        // If there are points spent, remove one
        if (talent.PointsSpent > 0 && !talent.IsFreeNode)
        {
            talent.PointsSpent--;
            TotalPointsSpent--;
        }

        UpdateUnlockedTalents();
    }
}
