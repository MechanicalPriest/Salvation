@using Salvation.Core.ViewModel
@inject IJSRuntime JS

@if(Talents.Count == 0)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <div class="talent-container">
        <div class="talent-grid mud-theme-dark">
            @foreach (var talent in Talents)
            {
                <a href="#" data-wowhead="spell=@(talent.TalentEntries[0].SpellId)" data-wh-rename-link="false"
                    class="talent talent-col-@(talent.TreeColumn) talent-row-@(talent.TreeRow)"
                    @onclick="e => OnTalentClick(e, talent)"
                    @oncontextmenu="e => OnTalentClick(e, talent)"
                    @oncontextmenu:preventDefault="true" data-ready="@(talent.PointsSpent == talent.TalentEntries[0].MaxRanks ? 0 : 1)">
                    <div class="talent-contents">
                        <div class="talent-image-holder">
                            <div class="talent-image" style="@GetImageStyle(talent.TalentEntries[0].Icon)">
                            </div>
                        </div>
                    </div>
                </a>
            }
        </div>
    </div>
    <div>
        <p>Selected talents</p>
        <ul>
            @foreach(var talent in Talents.Where(t => t.PointsSpent > 0))
            {
                <li><a href="https://www.wowhead.com/beta/spell=@talent.TalentEntries[0].SpellId" data-wh-icon-size="tiny">@talent.Name</a> (@talent.PointsSpent / @talent.TalentEntries[0].MaxRanks)</li>
            }
        </ul>
    </div>
}

@code {
    private static string NodeTypeSingle = "single";
    private static string NodeTypeChoice = "choice"; // Implement something for choice node later
    private static string UnknownIconName = "inv_misc_questionmark.jpg";
    public static int ClassPointsSpent = 0;
    public static int ClassPointsTotal = 31;

    [Parameter]
    public List<Talent> Talents { get; set; } = new List<Talent>();

    public string GetImageStyle(string talentIcon)
    {
        return $"background-image: url('static-data/icons/{talentIcon}.jpg'), url('static-data/icons/{UnknownIconName}');";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("updateWowheadTooltips");
        Console.WriteLine("updating tooltips");
    }

    public void OnTalentClick(MouseEventArgs eventArgs, Talent talent)
    {
        switch(eventArgs.Button)
        {
            case 0:
                TalentLeftClick(eventArgs, talent);
                break;
            case 2:
                TalentRightClick(eventArgs, talent);
                break;
            default:
                break;
        }
    }

    private void TalentLeftClick(MouseEventArgs eventArgs, Talent talent)
    {
        Console.WriteLine("Left clicked {0}", talent.Name);

        if (talent.Type == NodeTypeSingle)
        {
            // If there are points to spend, spend them
            if (talent.PointsSpent < talent.TalentEntries[0].MaxRanks)
            {
                talent.PointsSpent++;
                ClassPointsSpent++;
            }
        }
        else if (talent.Type == NodeTypeChoice)
        {

        }

        Console.WriteLine("{0} is at {1}/{2}", talent.Name, talent.PointsSpent, talent.TalentEntries[0].MaxRanks);
    }

    private void TalentRightClick(MouseEventArgs eventArgs, Talent talent)
    {
        Console.WriteLine("Right clicked {0}", talent.Name);

        if (talent.Type == NodeTypeSingle)
        {
            // If there are points spent, remove one
            if (talent.PointsSpent > 0)
            {
                talent.PointsSpent--;
                ClassPointsSpent--;
            }
        }
        else if (talent.Type == NodeTypeChoice)
        {

        }

        Console.WriteLine("{0} is at {1}/{2}", talent.Name, talent.PointsSpent, talent.TalentEntries[0].MaxRanks);
    }
}
